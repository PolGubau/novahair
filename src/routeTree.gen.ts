/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BookLayoutRouteImport } from './routes/book/layout'
import { Route as AdminLayoutRouteImport } from './routes/admin/layout'
import { Route as landingLayoutRouteImport } from './routes/(landing)/layout'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as landingIndexRouteImport } from './routes/(landing)/index'
import { Route as BookChooseServiceRouteImport } from './routes/book/choose-service'
import { Route as BookServiceIdRouteImport } from './routes/book/$serviceId'

const BookLayoutRoute = BookLayoutRouteImport.update({
  id: '/book',
  path: '/book',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLayoutRoute = AdminLayoutRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const landingLayoutRoute = landingLayoutRouteImport.update({
  id: '/(landing)',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminLayoutRoute,
} as any)
const landingIndexRoute = landingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => landingLayoutRoute,
} as any)
const BookChooseServiceRoute = BookChooseServiceRouteImport.update({
  id: '/choose-service',
  path: '/choose-service',
  getParentRoute: () => BookLayoutRoute,
} as any)
const BookServiceIdRoute = BookServiceIdRouteImport.update({
  id: '/$serviceId',
  path: '/$serviceId',
  getParentRoute: () => BookLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminLayoutRouteWithChildren
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
  '/': typeof landingIndexRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
  '/': typeof landingIndexRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(landing)': typeof landingLayoutRouteWithChildren
  '/admin': typeof AdminLayoutRouteWithChildren
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
  '/(landing)/': typeof landingIndexRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/book'
    | '/book/$serviceId'
    | '/book/choose-service'
    | '/'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to: '/book' | '/book/$serviceId' | '/book/choose-service' | '/' | '/admin'
  id:
    | '__root__'
    | '/(landing)'
    | '/admin'
    | '/book'
    | '/book/$serviceId'
    | '/book/choose-service'
    | '/(landing)/'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  landingLayoutRoute: typeof landingLayoutRouteWithChildren
  AdminLayoutRoute: typeof AdminLayoutRouteWithChildren
  BookLayoutRoute: typeof BookLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/book': {
      id: '/book'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(landing)': {
      id: '/(landing)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof landingLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexRouteImport
      parentRoute: typeof landingLayoutRoute
    }
    '/book/choose-service': {
      id: '/book/choose-service'
      path: '/choose-service'
      fullPath: '/book/choose-service'
      preLoaderRoute: typeof BookChooseServiceRouteImport
      parentRoute: typeof BookLayoutRoute
    }
    '/book/$serviceId': {
      id: '/book/$serviceId'
      path: '/$serviceId'
      fullPath: '/book/$serviceId'
      preLoaderRoute: typeof BookServiceIdRouteImport
      parentRoute: typeof BookLayoutRoute
    }
  }
}

interface landingLayoutRouteChildren {
  landingIndexRoute: typeof landingIndexRoute
}

const landingLayoutRouteChildren: landingLayoutRouteChildren = {
  landingIndexRoute: landingIndexRoute,
}

const landingLayoutRouteWithChildren = landingLayoutRoute._addFileChildren(
  landingLayoutRouteChildren,
)

interface AdminLayoutRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminLayoutRouteChildren: AdminLayoutRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
}

const AdminLayoutRouteWithChildren = AdminLayoutRoute._addFileChildren(
  AdminLayoutRouteChildren,
)

interface BookLayoutRouteChildren {
  BookServiceIdRoute: typeof BookServiceIdRoute
  BookChooseServiceRoute: typeof BookChooseServiceRoute
}

const BookLayoutRouteChildren: BookLayoutRouteChildren = {
  BookServiceIdRoute: BookServiceIdRoute,
  BookChooseServiceRoute: BookChooseServiceRoute,
}

const BookLayoutRouteWithChildren = BookLayoutRoute._addFileChildren(
  BookLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  landingLayoutRoute: landingLayoutRouteWithChildren,
  AdminLayoutRoute: AdminLayoutRouteWithChildren,
  BookLayoutRoute: BookLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
