/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BookLayoutRouteImport } from './routes/book/layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BookChooseServiceRouteImport } from './routes/book/choose-service'
import { Route as BookServiceIdRouteImport } from './routes/book/$serviceId'

const BookLayoutRoute = BookLayoutRouteImport.update({
  id: '/book',
  path: '/book',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookChooseServiceRoute = BookChooseServiceRouteImport.update({
  id: '/choose-service',
  path: '/choose-service',
  getParentRoute: () => BookLayoutRoute,
} as any)
const BookServiceIdRoute = BookServiceIdRouteImport.update({
  id: '/$serviceId',
  path: '/$serviceId',
  getParentRoute: () => BookLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/book': typeof BookLayoutRouteWithChildren
  '/book/$serviceId': typeof BookServiceIdRoute
  '/book/choose-service': typeof BookChooseServiceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/book' | '/book/$serviceId' | '/book/choose-service'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/book' | '/book/$serviceId' | '/book/choose-service'
  id: '__root__' | '/' | '/book' | '/book/$serviceId' | '/book/choose-service'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookLayoutRoute: typeof BookLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/book': {
      id: '/book'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/choose-service': {
      id: '/book/choose-service'
      path: '/choose-service'
      fullPath: '/book/choose-service'
      preLoaderRoute: typeof BookChooseServiceRouteImport
      parentRoute: typeof BookLayoutRoute
    }
    '/book/$serviceId': {
      id: '/book/$serviceId'
      path: '/$serviceId'
      fullPath: '/book/$serviceId'
      preLoaderRoute: typeof BookServiceIdRouteImport
      parentRoute: typeof BookLayoutRoute
    }
  }
}

interface BookLayoutRouteChildren {
  BookServiceIdRoute: typeof BookServiceIdRoute
  BookChooseServiceRoute: typeof BookChooseServiceRoute
}

const BookLayoutRouteChildren: BookLayoutRouteChildren = {
  BookServiceIdRoute: BookServiceIdRoute,
  BookChooseServiceRoute: BookChooseServiceRoute,
}

const BookLayoutRouteWithChildren = BookLayoutRoute._addFileChildren(
  BookLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookLayoutRoute: BookLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
